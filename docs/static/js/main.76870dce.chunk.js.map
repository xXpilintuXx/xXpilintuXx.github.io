{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cat","id","type","required","onChange","target","value","for","ProtoTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","src","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"sKAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,8BACA,qBAAKC,UAAU,cAAf,SACA,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACGL,EAAWM,OAAOC,OAAS,IAC5BT,GAAe,SAAAU,GAAG,OAAKR,GAAL,mBAAoBQ,OACtCP,EAAc,MAQlB,SACI,sBAAKC,UAAU,cAAf,UACI,uBAAOO,GAAG,SAASC,KAAK,SAASC,UAAQ,EACzCC,SAnBc,SAACR,GACvBH,EAAcG,EAAES,OAAOC,QAmBfA,MAAUd,IAEV,uBAAOE,UAAU,aAAaa,IAAI,SAAlC,SAA2C,mBAAGb,UAAU,iBAAb,sBAC3C,mBAAGA,UAAU,iBAAb,6BAchBL,EAAYmB,WAAa,CACrBlB,c,OAAekB,EAAWC,KAAKC,Y,mCC7CtBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHrB,GAAIqB,EAAIrB,GACRsB,MAAOD,EAAIC,MACXT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QATtB,kBAaZM,GAbY,4CAAH,sDCEPM,EAAc,SAAC,GAAwB,EAArBzB,GAAsB,IAAlBsB,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAMtC,OACI,mCAEA,qBAAKpB,UAAU,YAAf,SACA,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACA,qBAAKiC,IACDb,IAEJ,sBAAMpB,UAAU,aAAhB,SAA8B6B,cCV7BK,EAAU,SAAC,GAAkB,IAAhBhB,EAAe,EAAfA,SAAe,ECJb,SAAEA,GAAe,IAAD,EACdrB,mBAAS,CAC/B4B,KAAM,GACNU,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACNrB,EAAQC,GACPqB,MAAM,SAAAC,GACHH,EAAS,CACLZ,KAAMe,EACNL,SAAS,SAGlB,CAAEjB,IACEkB,EDP0BK,CAAcvB,GAAlCY,EAJwB,EAI7BL,KAAaU,EAJgB,EAIhBA,QAWrB,OACI,qCACI,6BAAKjB,IACPiB,GAAW,wCACb,qBAAKnC,UAAU,MAAf,SACU8B,EAAOH,KAAK,SAAAC,GAAG,OACjB,cAAC,EAAD,eAGKA,GADCA,EAAIrB,aE1BbmC,EAAe,WAAO,IAAD,EAEM7C,mBAAS,CAAC,oBAFhB,mBAEvB8C,EAFuB,KAEX/C,EAFW,KAQ9B,OACI,qCACA,gDACA,uBACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEQ+C,EAAWhB,KAAK,SAACT,EAAU0B,GAAX,OACZ,cAAC,EAAD,CAEA1B,SAAWA,GADJA,EAAW0B,YCbtCC,IAASC,OAAO,cAAC,EAAD,IAAmBC,SAASC,eAAe,W","file":"static/js/main.76870dce.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport ProtoTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 2  ) {\r\n            setCategories( cat => [inputValue, ...cat]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <nav>\r\n        <div className=\"nav-wrapper\">\r\n        <form onSubmit= { handleSubmit }>\r\n            <div className=\"input-field\">\r\n                <input id=\"search\" type=\"search\" required\r\n                onChange= { handleInputChange }\r\n                value = { inputValue }\r\n                ></input>\r\n                <label className=\"label-icon\" for=\"search\"><i className=\"material-icons\">search</i></label>\r\n                <i className=\"material-icons\">close</i>\r\n                </div>\r\n            {/* <input \r\n                type=\"text\"\r\n                value= {inputValue}\r\n                onChange={ handleInputChange }\r\n                /> */}\r\n        </form>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.ProtoTypes = {\r\n    setCategories: ProtoTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=tHnwKH1Qi2F5r6fCqbSGrcnv36pj1jR1`\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n        \r\n    });\r\n    return gifs;\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url} ) => {\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    return (\r\n        <>\r\n        \r\n        <div className=\"col s2 m2\">\r\n        <div className=\"card\">\r\n            <div className=\"card-image\">\r\n            <img src= {\r\n                url\r\n            }></img>\r\n            <span className=\"card-title\">{title}</span>\r\n            </div>\r\n          </div>\r\n          </div>\r\n          \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n\r\n\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n    \r\n\r\n\r\n    // useEffect( ()=> {\r\n    //     getGifs(category)\r\n    //     .then(imgs => setImages(imgs))\r\n    // }, [ category ])\r\n\r\n    \r\n    // getGifs();\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n        { loading && <p>Loading</p>}\r\n        <div className=\"row\">\r\n                { images.map( img => \r\n                <GifGridItem \r\n                \r\n                key= {img.id}\r\n                { ...img }\r\n                />\r\n                )}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n        .then( imgs => {\r\n            setstate({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n        })\r\n    }, [ category ])\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from './AddCategory'\r\nimport { GifGrid } from './GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Attack On Titan'])\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories( arr => [...arr, 'Tom&Jerry'])\r\n    // }\r\n\r\n    return (\r\n        <>\r\n        <h1>Gif Expert App</h1>\r\n        <hr />\r\n        <AddCategory setCategories={ setCategories } />\r\n        <ol>\r\n            {\r\n                categories.map( (category, i) => \r\n                    <GifGrid \r\n                    key = {category + i}\r\n                    category={ category } />\r\n                )\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './components/gifExpertApp';\n\n// import './index.css';\n\n\nReactDOM.render(<GifExpertApp />,  document.getElementById('root'));\n\n//GifExpertApp\n// <h2> gifExpertApp </h2>\n// <hr />"],"sourceRoot":""}